[{"C:\\Users\\ASUS\\dev\\mesto-react\\src\\index.js":"1","C:\\Users\\ASUS\\dev\\mesto-react\\src\\reportWebVitals.js":"2","C:\\Users\\ASUS\\dev\\mesto-react\\src\\components\\App.js":"3","C:\\Users\\ASUS\\dev\\mesto-react\\src\\components\\Header.js":"4","C:\\Users\\ASUS\\dev\\mesto-react\\src\\components\\Main.js":"5","C:\\Users\\ASUS\\dev\\mesto-react\\src\\components\\Footer.js":"6","C:\\Users\\ASUS\\dev\\mesto-react\\src\\components\\PopupWithForm.js":"7","C:\\Users\\ASUS\\dev\\mesto-react\\src\\components\\ImagePopup.js":"8","C:\\Users\\ASUS\\dev\\mesto-react\\src\\utils\\api.js":"9","C:\\Users\\ASUS\\dev\\mesto-react\\src\\utils\\constants.js":"10"},{"size":563,"mtime":1678822907490,"results":"11","hashOfConfig":"12"},{"size":375,"mtime":1678822907490,"results":"13","hashOfConfig":"12"},{"size":5644,"mtime":1679146507015,"results":"14","hashOfConfig":"12"},{"size":250,"mtime":1678822907490,"results":"15","hashOfConfig":"12"},{"size":1371,"mtime":1679146507016,"results":"16","hashOfConfig":"12"},{"size":212,"mtime":1678822907490,"results":"17","hashOfConfig":"12"},{"size":795,"mtime":1679146507017,"results":"18","hashOfConfig":"12"},{"size":481,"mtime":1679146507015,"results":"19","hashOfConfig":"12"},{"size":2017,"mtime":1679146507017,"results":"20","hashOfConfig":"12"},{"size":2546,"mtime":1679146507018,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"1c6pk29",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ASUS\\dev\\mesto-react\\src\\index.js",[],[],[],"C:\\Users\\ASUS\\dev\\mesto-react\\src\\reportWebVitals.js",[],[],"C:\\Users\\ASUS\\dev\\mesto-react\\src\\components\\App.js",["55","56"],[],"import React, { useState, useEffect } from \"react\";\r\nimport Header from \"./Header\";\r\nimport Main from \"./Main\";\r\nimport Footer from \"./Footer\";\r\nimport PopupWithForm from \"./PopupWithForm\";\r\nimport ImagePopup from \"./ImagePopup\";\r\nimport api from \"../utils/api\";\r\n\r\nfunction App() {\r\n  //переменные состояния попапов\r\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false);\r\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = useState(false);\r\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false);\r\n\r\n  function closeAllPopups() {\r\n    setIsEditAvatarPopupOpen(false);\r\n    setIsEditProfilePopupOpen(false);\r\n    setIsAddPlacePopupOpen(false);\r\n  }\r\n\r\n  const onEditAvatar = () => {\r\n    setIsEditAvatarPopupOpen(true);\r\n  };\r\n  const onEditProfile = () => {\r\n    setIsEditProfilePopupOpen(true);\r\n  };\r\n  const onAddPlace = () => {\r\n    setIsAddPlacePopupOpen(true);\r\n  };\r\n\r\n  //переменные состояния апи\r\n  const [userName, setUserName] = useState([]);\r\n  const [userDescription, setUserDescription] = useState([]);\r\n  const [userAvatar, setUserAvatar] = useState([]);\r\n  const [cards, setCards] = useState([]);\r\n\r\n  useEffect(() => {\r\n    api\r\n      .getUserData()\r\n      .then((res) => {\r\n        setUserName(res.name);\r\n        setUserDescription(res.about);\r\n        setUserAvatar(res.avatar);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    api.getInitialCards().then((res) => {\r\n      setCards(res);\r\n    });\r\n  }, []);\r\n\r\n  console.log(cards);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"page\">\r\n        <Header />\r\n        <Main\r\n          onEditAvatar={onEditAvatar}\r\n          onEditProfile={onEditProfile}\r\n          onAddPlace={onAddPlace}\r\n          name={userName}\r\n          description={userDescription}\r\n          avatar={userAvatar}\r\n        />\r\n        <Footer />\r\n      </div>\r\n      <PopupWithForm\r\n        title=\"Обновить аватар\"\r\n        name=\"avatar\"\r\n        valueSubmit=\"Обновить\"\r\n        isOpen={isEditAvatarPopupOpen}\r\n        onClose={closeAllPopups}\r\n      >\r\n        <label className=\"modal__form-field\">\r\n          <input\r\n            required\r\n            id=\"avatarlink-input\"\r\n            type=\"url\"\r\n            className=\"modal__input modal__input_type_image-link\"\r\n            name=\"link\"\r\n            placeholder=\"Новый аватар\"\r\n          />\r\n          <span className=\"modal__input-error avatarlink-input-error\"></span>\r\n        </label>\r\n      </PopupWithForm>\r\n      <PopupWithForm\r\n        title=\"Редактировать профиль\"\r\n        name=\"edit\"\r\n        valueSubmit=\"Сохранить\"\r\n        isOpen={isEditProfilePopupOpen}\r\n        onClose={closeAllPopups}\r\n      >\r\n        <label className=\"modal__form-field\">\r\n          <input\r\n            required\r\n            id=\"name-input\"\r\n            type=\"text\"\r\n            minlength=\"2\"\r\n            maxlength=\"40\"\r\n            className=\"modal__input modal__input_type_name\"\r\n            name=\"username\"\r\n            placeholder=\"Введите имя\"\r\n          />\r\n          <span className=\"modal__input-error name-input-error\"></span>\r\n        </label>\r\n        <label className=\"modal__form-field\">\r\n          <input\r\n            required\r\n            id=\"profession-input\"\r\n            type=\"text\"\r\n            minlength=\"2\"\r\n            maxlength=\"200\"\r\n            className=\"modal__input modal__input_type_profession\"\r\n            name=\"profession\"\r\n            placeholder=\"Введите профессию\"\r\n          />\r\n          <span className=\"modal__input-error profession-input-error\"></span>\r\n        </label>\r\n      </PopupWithForm>\r\n      <PopupWithForm\r\n        title=\"Новое место\"\r\n        name=\"add\"\r\n        valueSubmit=\"Создать\"\r\n        isOpen={isAddPlacePopupOpen}\r\n        onClose={closeAllPopups}\r\n      >\r\n        <label className=\"modal__form-field\">\r\n          <input\r\n            required\r\n            id=\"placename-input\"\r\n            type=\"text\"\r\n            minlength=\"2\"\r\n            maxlength=\"30\"\r\n            className=\"modal__input modal__input_type_place-name\"\r\n            name=\"name\"\r\n            placeholder=\"Название\"\r\n          />\r\n          <span className=\"modal__input-error placename-input-error\"></span>\r\n        </label>\r\n        <label className=\"modal__form-field\">\r\n          <input\r\n            required\r\n            id=\"imagelink-input\"\r\n            type=\"url\"\r\n            className=\"modal__input modal__input_type_image-link\"\r\n            name=\"link\"\r\n            placeholder=\"Ссылка на картинку\"\r\n          />\r\n          <span className=\"modal__input-error imagelink-input-error\"></span>\r\n        </label>\r\n      </PopupWithForm>\r\n      <PopupWithForm\r\n        title=\"Вы уверены?\"\r\n        name=\"delete\"\r\n        valueSubmit=\"Да\"\r\n      ></PopupWithForm>\r\n      <ImagePopup></ImagePopup>\r\n      <template id=\"template-cards\">\r\n        <li className=\"card-grid__element\">\r\n          <img className=\"card-grid__item\" />\r\n          <button type=\"button\" className=\"urn button-hover\"></button>\r\n          <div className=\"card-grid__name\">\r\n            <h2 className=\"card-grid__title\"></h2>\r\n            <div className=\"card-grid__likes\">\r\n              <button type=\"button\" className=\"card-grid__likeButton\"></button>\r\n              <p className=\"card-grid__like-counter\">0</p>\r\n            </div>\r\n          </div>\r\n        </li>\r\n      </template>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\ASUS\\dev\\mesto-react\\src\\components\\Header.js",[],[],"C:\\Users\\ASUS\\dev\\mesto-react\\src\\components\\Main.js",[],[],"C:\\Users\\ASUS\\dev\\mesto-react\\src\\components\\Footer.js",[],[],"C:\\Users\\ASUS\\dev\\mesto-react\\src\\components\\PopupWithForm.js",[],[],"C:\\Users\\ASUS\\dev\\mesto-react\\src\\components\\ImagePopup.js",[],[],"C:\\Users\\ASUS\\dev\\mesto-react\\src\\utils\\api.js",["57"],[],"import React from \"react\";\r\nimport { apiConfig } from \"../utils/constants\";\r\n\r\nclass Api {\r\n  constructor(config) {\r\n    this.baseUrl = config.baseUrl;\r\n    this.headers = config.headers;\r\n  }\r\n\r\n  _handleResponse = (res) => {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  };\r\n\r\n  getUserData() {\r\n    return fetch(`${this.baseUrl}/users/me`, {\r\n      method: \"GET\",\r\n      headers: this.headers,\r\n    }).then(this._handleResponse);\r\n  }\r\n\r\n  getInitialCards() {\r\n    return fetch(`${this.baseUrl}/cards`, {\r\n      method: \"GET\",\r\n      headers: this.headers,\r\n    }).then(this._handleResponse);\r\n  }\r\n\r\n  createCard(data) {\r\n    return fetch(`${this.baseUrl}/cards`, {\r\n      method: \"POST\",\r\n      headers: this.headers,\r\n      body: JSON.stringify({\r\n        name: data.name,\r\n        link: data.link,\r\n      }),\r\n    }).then(this._handleResponse);\r\n  }\r\n\r\n  setUserData(data) {\r\n    return fetch(`${this.baseUrl}/users/me`, {\r\n      method: \"PATCH\",\r\n      headers: this.headers,\r\n      body: JSON.stringify({\r\n        name: data.username,\r\n        about: data.profession,\r\n      }),\r\n    }).then(this._handleResponse);\r\n  }\r\n\r\n  setLike(cardId) {\r\n    return fetch(`${this.baseUrl}/cards/${cardId}/likes`, {\r\n      method: \"PUT\",\r\n      headers: this.headers,\r\n    }).then(this._handleResponse);\r\n  }\r\n\r\n  removeLike(id) {\r\n    return fetch(`${this.baseUrl}/cards/${id}/likes`, {\r\n      method: \"DELETE\",\r\n      headers: this.headers,\r\n    }).then(this._handleResponse);\r\n  }\r\n\r\n  deleteCard(id) {\r\n    return fetch(`${this.baseUrl}/cards/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: this.headers,\r\n    }).then(this._handleResponse);\r\n  }\r\n\r\n  setAvatar(link) {\r\n    return fetch(`${this.baseUrl}/users/me/avatar`, {\r\n      method: \"PATCH\",\r\n      headers: this.headers,\r\n      body: JSON.stringify({\r\n        avatar: link,\r\n      }),\r\n    }).then(this._handleResponse);\r\n  }\r\n}\r\n\r\nconst api = new Api(apiConfig);\r\n\r\nexport default api;\r\n","C:\\Users\\ASUS\\dev\\mesto-react\\src\\utils\\constants.js",[],[],{"ruleId":"58","severity":1,"message":"59","line":165,"column":11,"nodeType":"60","endLine":165,"endColumn":46},{"ruleId":"61","severity":1,"message":"62","line":168,"column":13,"nodeType":"60","endLine":168,"endColumn":46},{"ruleId":"63","severity":1,"message":"64","line":1,"column":8,"nodeType":"65","messageId":"66","endLine":1,"endColumn":13},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","no-unused-vars","'React' is defined but never used.","Identifier","unusedVar"]